{
    "rules": {
        "userTokens": {
            "$uid": {
                /* this should be only cloud functions */
                ".write": "auth != null",
                "token": {
                    ".read": "auth.uid == 'some-uid'",
                    ".validate": "auth.uid == 'some-uid'"
                },
                "$other": {
                    ".read": false,
                    ".write": false
                }
            }
        },
        "users": {
            "$uid": {
                ".read": "$uid == auth.uid || root.child('users').child(auth.uid).child('isVerified').val() == true",
                ".write": "$uid == auth.uid || root.child('users').child(auth.uid).child('isVerified').val() == true",
                "shellMailId": {
                    ".validate": "$uid == auth.uid && newData.val().endsWith('@shell.com') && !newData.val().contains('<')  && !newData.val().contains('(')"
                },
                "isVerified": {
                    ".read": "auth != null",
                    ".write": true,
                    ".validate": "newData.isBoolean() && auth.uid != $uid"
                },
                "capacity": {
                    ".validate": "newData.isNumber() && newData.val() < 9"
                },
                "car": {
                    ".validate": "newData.isString() && newData.val().length < 30 && !newData.val().contains('<')  && !newData.val().contains('(')"
                },
                "homeLocation": {
                    ".validate": "newData.isString() && newData.val().length < 50 && !newData.val().contains('<')  && !newData.val().contains('(')"
                },
                "remainingSeats": {
                    //".validate": "newData.val() > -1",
                    ".write": "$uid != auth.uid"
                },
                "vehicleNumber": {
                    ".validate": "newData.val().length < 15 && !newData.val().contains('<')  && !newData.val().contains('(')"
                },
                "$other": {
                    ".read": false,
                    ".write": false
                }
            }
        },
        "activeRoutes": {
            "$uid": {
                ".read": "root.child('users').child(auth.uid).child('isVerified').val() == true",
                ".write": "root.child('users').child(auth.uid).child('isVerified').val() == true",
            }
        },
        "userroutes": {
            ".read": "root.child('users').child(auth.uid).child('isVerified').val() == true",
            ".write": "root.child('users').child(auth.uid).child('isVerified').val() == true",
            ".indexOn": "g",
            "$uid": {
                ".validate": "$uid.beginsWith(auth.uid)",
                ".indexOn": "g"
            }
        },
        "routes": {
            "$uid": {
                ".read": "root.child('users').child(auth.uid).child('isVerified').val() == true",
                ".write": "root.child('users').child(auth.uid).child('isVerified').val() == true",
                ".indexOn": [
                    "isDeleted",
                    "isActive"
                ]
            }
        },
        "requests": {
            ".read": "root.child('users').child(auth.uid).child('isVerified').val() == true",
            "$uid": {
                ".read": "root.child('users').child(auth.uid).child('isVerified').val() == true",
                ".write": "$uid == auth.uid && root.child('users').child(auth.uid).child('isVerified').val() == true",
                ".indexOn": "requestedTo"
            }
        },
        "$other": {
            ".read": false,
            ".write": false
        }
    }
}